use std::time::{Duration, Instant};

use super::packet_checking::{is_icmpv6_echo_reply, is_icmpv6_nd_ns};
use pnet::datalink::Channel::Ethernet;
use pnet::datalink::Config;
use pnet::datalink::{self, DataLinkReceiver, DataLinkSender, NetworkInterface};

pub fn create_ethernet_channel(
    interface: &NetworkInterface,
) -> Option<(Box<dyn DataLinkSender>, Box<dyn DataLinkReceiver>)> {
    let config = Config::default();
    match datalink::channel(interface, config) {
        Ok(Ethernet(tx, rx)) => Some((tx, rx)),
        _ => panic!("Error creating datalink channel"),
    }
}

pub fn listen_for_packet<F>(rx: &mut dyn DataLinkReceiver, predicate: F) -> Option<Vec<u8>>
where
    F: Fn(&[u8]) -> bool,
{
    loop {
        match rx.next() {
            Ok(packet) => {
                if predicate(packet) {
                    // Get the raw packet data as a slice
                    return Some(packet.to_vec());
                }
            }
            Err(e) => {
                panic!("An error occurred while reading a packet: {}", e);
            }
        }
    }
}

pub fn listen_for_corruption(rx: &mut dyn DataLinkReceiver) -> bool {
    loop {
        match rx.next() {
            Ok(packet) => {
                // If you find a echo reply return false
                if is_icmpv6_echo_reply(packet) {
                    return false;
                }
                // If you find a nd_ns return true
                if is_icmpv6_nd_ns(packet) {
                    return true;
                }
                // Else continue searching
            }
            Err(e) => {
                panic!("An error occurred while reading a packet: {}", e);
            }
        }
    }
}
