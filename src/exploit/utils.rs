use super::packet_checking::{is_icmpv6_echo_reply, is_icmpv6_nd_ns};
use pnet::datalink::Channel::Ethernet;
use pnet::datalink::Config;
use pnet::datalink::{self, DataLinkReceiver, DataLinkSender, NetworkInterface};

use std::thread;
use std::time::{Duration, Instant};

pub fn create_ethernet_channel(
    interface: &NetworkInterface,
) -> Option<(Box<dyn DataLinkSender>, Box<dyn DataLinkReceiver>)> {
    let config = Config::default();
    match datalink::channel(interface, config) {
        Ok(Ethernet(tx, rx)) => Some((tx, rx)),
        _ => panic!("Error creating datalink channel"),
    }
}

pub fn listen_for_packet<F>(
    rx: &mut dyn DataLinkReceiver,
    predicate: F,
    timeout: Option<Duration>,
) -> Option<Vec<u8>>
where
    F: Fn(&[u8]) -> bool,
{
    let timeout = timeout.unwrap_or(Duration::from_secs(30));
    let start_time = Instant::now();

    loop {
        // Check if timeout has passed
        if start_time.elapsed() >= timeout {
            return None; // Return None if timed out // TODO better exit
        }

        match rx.next() {
            Ok(packet) => {
                if predicate(packet) {
                    // Get the raw packet data as a slice
                    return Some(packet.to_vec());
                }
            }
            Err(e) => {
                panic!("An error occurred while reading a packet: {}", e);
            }
        }

        // Sleep for a short time to avoid a tight loop
        thread::sleep(Duration::from_millis(10));
    }
}

pub fn listen_for_corruption(rx: &mut dyn DataLinkReceiver) -> bool {
    let timeout = Duration::from_secs(30);
    let start_time = Instant::now();
    loop {
        // Check if timeout has passed
        if start_time.elapsed() >= timeout {
            return false;
        }

        match rx.next() {
            Ok(packet) => {
                if is_icmpv6_echo_reply(packet) {
                    return false;
                } else if is_icmpv6_nd_ns(packet) {
                    return true;
                }
            }
            Err(e) => {
                panic!("An error occurred while reading a packet: {}", e);
            }
        }
    }
}
